name: Build and Release

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run linter
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        goarch: [amd64, arm64]
        exclude:
          - os: windows-latest
            goarch: arm64
          - os: macos-latest
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Build
        env:
          GOOS: ${{ matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'windows-latest' && 'windows' || 'darwin' }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          if [ "$VERSION" = "$GITHUB_REF" ]; then
            VERSION="dev"
          fi
          BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S_UTC')
          COMMIT_HASH=${{ github.sha }}
          
          LDFLAGS="-X 'main.Version=$VERSION' -X 'main.BuildTime=$BUILD_TIME' -X 'main.CommitHash=$COMMIT_HASH'"
          
          OUTPUT_NAME="nvs"
          if [ "$GOOS" = "windows" ]; then
            OUTPUT_NAME="nvs.exe"
          fi
          
          go build -ldflags "$LDFLAGS" -o "$OUTPUT_NAME" .
          
          mkdir -p build
          mv "$OUTPUT_NAME" "build/"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nvs-${{ matrix.os }}-${{ matrix.goarch }}
          path: build/
          retention-days: 30

  release:
    name: Release
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release assets
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          mkdir -p release
          
          # Move and rename artifacts
          for artifact in artifacts/*/; do
            platform=$(basename "$artifact")
            if [ -d "$artifact/build" ]; then
              for file in "$artifact/build"/*; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  if [[ "$filename" == *.exe ]]; then
                    # Windows executable
                    cp "$file" "release/nvs-$VERSION-$platform.zip"
                  else
                    # Unix executable
                    cp "$file" "release/nvs-$VERSION-$platform"
                  fi
                fi
              done
            fi
          done
          
          # Create checksums
          cd release
          for file in *; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> checksums.sha256
            fi
          done
          cd ..

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Docker
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            nevilsoft/nvs:latest
            nevilsoft/nvs:${{ github.ref_name }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max 