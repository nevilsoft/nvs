package cmd

import (
	"fmt"
	"math/rand"
	"os"
	"os/exec"
	"runtime"
	"strings"

	"github.com/spf13/cobra"
)

var (
	output string
	target string
	semver string
)

var buildCmd = &cobra.Command{
	Use:   "build",
	Short: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÅ‡∏ö‡∏ö obfuscate (‡∏î‡πâ‡∏ß‡∏¢ garble)",
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("üîí ‡∏Å‡∏≥‡∏•‡∏±‡∏á build ‡πÅ‡∏ö‡∏ö obfuscate ‡∏î‡πâ‡∏ß‡∏¢ garble...")

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ garble ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
		if _, err := exec.LookPath("garble"); err != nil {
			fmt.Println("üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á garble...")
			install := exec.Command("go", "install", "mvdan.cc/garble@latest")
			install.Stdout = os.Stdout
			install.Stderr = os.Stderr
			install.Env = os.Environ()
			if err := install.Run(); err != nil {
				fmt.Println("‚ùå ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á garble ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err)
				return
			}
		}

		// ‡πÅ‡∏¢‡∏Å GOOS ‡πÅ‡∏•‡∏∞ GOARCH ‡∏à‡∏≤‡∏Å target
		goos := runtime.GOOS
		goarch := runtime.GOARCH
		if target != "" {
			parts := strings.Split(target, "/")
			if len(parts) != 2 {
				fmt.Println("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö target ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á. ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡πÄ‡∏ä‡πà‡∏ô linux/amd64 ‡∏´‡∏£‡∏∑‡∏≠ windows/amd64")
				return
			}
			goos, goarch = parts[0], parts[1]
		}

		// ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå output
		if output == "" {
			output = "main"
		}
		if goos == "windows" && !strings.HasSuffix(output, ".exe") {
			output += ".exe"
		}
		buildNumber := fmt.Sprintf("%06d", rand.Intn(1000000))
		versionString := semver

		if buildNumber != "" {
			versionString += "." + buildNumber
		}

		ldflags := fmt.Sprintf("-X 'main.Version=%s'", versionString)
		ldflags += fmt.Sprintf("-X 'main.RunnerID=%s'", "132456")

		// ‡∏™‡∏±‡πà‡∏á garble build
		cmdGarble := exec.Command("garble", "build", "-ldflags", ldflags, "-o", output, "./main.go")
		cmdGarble.Stdout = os.Stdout
		cmdGarble.Stderr = os.Stderr
		cmdGarble.Env = append(os.Environ(),
			"GOOS="+goos,
			"GOARCH="+goarch,
		)

		fmt.Printf("üõ†Ô∏è  Target: %s/%s\n", goos, goarch)
		if err := cmdGarble.Run(); err != nil {
			fmt.Println("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ build ‡πÑ‡∏î‡πâ:", err)
			return
		}

		fmt.Printf("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° obfuscated ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà: %s\n", output)
	},
}

func init() {
	buildCmd.Flags().StringVarP(&output, "output", "o", "", "‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå output (default: main)")
	buildCmd.Flags().StringVarP(&target, "target", "t", "", "‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô linux/amd64, windows/amd64, darwin/arm64)")
	buildCmd.Flags().StringVarP(&semver, "version", "v", "dev", "Build version (default: dev)")
	RootCmd.AddCommand(buildCmd)
}
