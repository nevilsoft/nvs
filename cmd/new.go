package cmd

import (
	"embed"
	"fmt"
	"io/fs"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/spf13/cobra"
)

//go:embed templates/*
var templatesFS embed.FS

var newCmd = &cobra.Command{
	Use:   "new [project_name]",
	Short: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå Golang",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		projectName := args[0]
		dbType, _ := cmd.Flags().GetString("db")
		useGRPC, _ := cmd.Flags().GetBool("grpc")
		repo, _ := cmd.Flags().GetString("repo")

		// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ `--repo` ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ projectName ‡πÄ‡∏õ‡πá‡∏ô module
		if repo == "" {
			repo = projectName
		}

		fmt.Printf("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå %s (module: %s)...\n", projectName, repo)

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
		if err := os.Mkdir(projectName, 0755); err != nil {
			fmt.Println("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå:", err)
			return
		}

		// ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï
		err := copyEmbeddedTemplates("templates", projectName, map[string]string{
			"ProjectName": projectName,
			"ModuleName":  repo, // ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô module
			"DBType":      dbType,
			"UseGRPC":     fmt.Sprintf("%t", useGRPC),
		})

		if err != nil {
			fmt.Println("‚ùå ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err)
			return
		}

		fmt.Println("‚úÖ ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
		fmt.Printf("üìÇ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÅ‡∏•‡πâ‡∏ß, ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:\n")
		fmt.Printf("  1. cd %s\n", projectName)
		fmt.Println("  2. go mod tidy")
		fmt.Println("  3. go run main.go")
	},
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å embed
func copyEmbeddedTemplates(srcDir, destDir string, data map[string]string) error {
	return fs.WalkDir(templatesFS, srcDir, func(path string, d os.DirEntry, err error) error {
		if err != nil {
			return err
		}

		relPath, _ := filepath.Rel(srcDir, path)
		targetPath := filepath.Join(destDir, relPath)

		if d.IsDir() {
			return os.MkdirAll(targetPath, 0755)
		}

		content, err := templatesFS.ReadFile(path)
		if err != nil {
			return err
		}

		tmpl, err := template.New("").Parse(string(content))
		if err != nil {
			return err
		}

		file, err := os.Create(strings.TrimSuffix(targetPath, ".tmpl"))
		if err != nil {
			return err
		}
		defer file.Close()

		return tmpl.Execute(file, data)
	})
}

func init() {
	newCmd.Flags().String("db", "", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏ä‡πà‡∏ô postgres, mysql)")
	newCmd.Flags().Bool("grpc", false, "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô gRPC")
	newCmd.Flags().String("repo", "", "‡∏£‡∏∞‡∏ö‡∏∏ module name (‡πÄ‡∏ä‡πà‡∏ô github.com/user/project)")

	RootCmd.AddCommand(newCmd)
}
