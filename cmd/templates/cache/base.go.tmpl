package cache

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/redis/go-redis/v9"

	"{{ .ModuleName }}/config"
)

var (
	client *redis.Client
)

func Init() error {
	client = redis.NewClient(&redis.Options{
		Addr:         fmt.Sprintf("%s:%d", config.Conf.RedisHost, config.Conf.RedisPort),
		Password:     config.Conf.RedisPassword,
		DB:           0,
		PoolSize:     10,
		MinIdleConns: 5,
	})

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
	if err := client.Ping(ctx).Err(); err != nil {
		log.Fatalf("Redis connection failed: %v", err)
		return err
	}

	log.Println("üíé Redis connected successfully")

	return nil
}

func GetCacheClient() *redis.Client {
	return client
}

func Close() {
	if client != nil {
		_ = client.Close()
	}
}
