/*
 * Created on Tue Mar 04 2025
 *
 * © 2025 Nevilsoft Ltd., Part. All Rights Reserved.
 *
 * * ข้อมูลลับและสงวนสิทธิ์ *
 * ไฟล์นี้เป็นทรัพย์สินของ Nevilsoft Ltd., Part. และมีข้อมูลที่เป็นความลับทางธุรกิจ
 * อนุญาตให้เฉพาะพนักงานที่ได้รับสิทธิ์เข้าถึงเท่านั้น
 * ห้ามเผยแพร่ คัดลอก ดัดแปลง หรือใช้งานโดยไม่ได้รับอนุญาตจากฝ่ายบริหาร
 *
 * การละเมิดข้อตกลงนี้ อาจมีผลให้ถูกลงโทษทางวินัย รวมถึงการดำเนินคดีตามกฎหมาย
 * ตามพระราชบัญญัติว่าด้วยการกระทำความผิดเกี่ยวกับคอมพิวเตอร์ พ.ศ. 2560 (มาตรา 7, 9, 10)
 * และกฎหมายอื่นที่เกี่ยวข้อง
 */

package config

import (
	"fmt"
	"os"
	"strconv"
	"strings"
	"time"

	"{{ .ModuleName }}/constants"
)

type Config struct {
	Port        string
	Environment string
	ServiceName string
	Version     string

	// Database
	DatabaseEnabled bool

	PostgresHost     string
	PostgresPort     string
	PostgresUser     string
	PostgresDB       string
	PostgresPassword string

	PostgresSSLMode      string
	PostgresRootCertLoc  string
	PostgresMaxOpenConns int
	PostgresMaxIdleConns int
	PostgresMaxIdleTime  time.Duration

	// Redis
	RedisEnabled  bool
	RedisHost     string
	RedisPort     int
	RedisPassword string

	AllowOrigins string
}

type confVars struct {
	missing   []string //name of the mandatory environment variable that are missing
	malformed []string //errors describing malformed environment varibale values
}

var Conf *Config

// New initializes and returns a new Config instance by loading configuration
// values from environment variables. It requires certain mandatory variables
// to be set, such as PORT, ENVIRONMENT, POSTGRES_HOST, POSTGRES_PORT, POSTGRES_USER,
// POSTGRES_DB, and POSTGRES_PASSWORD. Optional variables have default values if
// not set, including SERVICE_NAME, VERSION, POSTGRES_SSL_MODE, POSTGRES_ROOT_CERT_LOC,
// POSTGRES_MAX_OPEN_CONNS, POSTGRES_MAX_IDLE_CONNS, and POSTGRES_MAX_IDLE_TIME.
// If any mandatory environment variables are missing or malformed, an error
// is returned. The resulting Config object is assigned to the package-level
// variable Conf.
func New() (*Config, error) {
	vars := &confVars{}

	port := vars.mandatoryInt("PORT")
	environment := vars.mandatory("ENV")
	serviceName := vars.optional("SERVICE_NAME", "go-service")
	version := vars.optional("VERSION", "1.0.0")

	databaseEnabled := vars.optionalBool("DATABASE_ENABLED", false)
	postgresHost := vars.optional("POSTGRES_HOST", "")
	postgresPort := vars.optional("POSTGRES_PORT", "5432")
	postgresUser := vars.optional("POSTGRES_USER", "")
	postgresDB := vars.optional("POSTGRES_DB", "")
	postgresPassword := vars.optional("POSTGRES_PASSWORD", "")

	redisEnabled := vars.optionalBool("REDIS_ENABLED", false)
	redisHost := vars.optional("REDIS_HOST", "")
	redisPort := vars.optionalInt("REDIS_PORT", 6379)
	redisPassword := vars.optional("REDIS_PASSWORD", "")

	postgresSSLMode := vars.optional("POSTGRES_SSL_MODE", "disable")
	postgresRootCertLoc := vars.optional("POSTGRES_ROOT_CERT_LOC", "")

	postgresMaxOpenConns := vars.optionalInt("POSTGRES_MAX_OPEN_CONNS", constants.POSTGRES_MAX_OPEN_CONNS)
	postgresMaxIdleConns := vars.optionalInt("POSTGRES_MAX_IDLE_CONNS", constants.POSTGRES_MAX_IDLE_CONNS)
	postgresMaxIdleTime := vars.optionalDuration("POSTGRES_MAX_IDLE_TIME", 5*time.Minute)

	allowOrigins := vars.optional("ALLOW_ORIGINS", "*")

	if err := vars.Error(); err != nil {
		return nil, fmt.Errorf("error loading configuration: %w", err)
	}

	config := &Config{
		Port:        fmt.Sprintf(":%d", port),
		Environment: environment,
		ServiceName: serviceName,
		Version:     version,

		DatabaseEnabled:  databaseEnabled,
		PostgresHost:     postgresHost,
		PostgresPort:     postgresPort,
		PostgresUser:     postgresUser,
		PostgresDB:       postgresDB,
		PostgresPassword: postgresPassword,

		RedisEnabled:  redisEnabled,
		RedisHost:     redisHost,
		RedisPort:     redisPort,
		RedisPassword: redisPassword,

		PostgresSSLMode:      postgresSSLMode,
		PostgresRootCertLoc:  postgresRootCertLoc,
		PostgresMaxOpenConns: postgresMaxOpenConns,
		PostgresMaxIdleConns: postgresMaxIdleConns,
		PostgresMaxIdleTime:  postgresMaxIdleTime,

		AllowOrigins: allowOrigins,
	}

	Conf = config

	return config, nil
}

// optional returns a string value of the given environment variable. If the
// variable is missing, it returns the fallback value. Otherwise, it returns the
// value of the environment variable.
func (vars *confVars) optional(key, fallback string) string {
	value := os.Getenv(key)
	if value == "" {
		return fallback
	}
	return value
}

// optionalInt returns an integer value of the given environment variable. If the
// variable is missing, it returns the fallback value. If the variable is not a
// valid integer value, it appends the key to the slice of malformed variables
// and returns the fallback value. Otherwise, it returns the parsed integer value.
func (vars *confVars) optionalInt(key string, fallback int) int {
	value := os.Getenv(key)
	if value == "" {
		return fallback
	}

	valueInt, err := strconv.Atoi(value)

	if err != nil {
		vars.malformed = append(vars.malformed, key)
		return fallback
	}

	return valueInt
}

// optionalBool returns a boolean value of the given environment variable.
// If the variable is missing, it returns the fallback value. If the variable is not a valid boolean value,
// it appends the key to the slice of malformed variables and returns the fallback value.
// Otherwise, it returns the parsed boolean value.
func (vars *confVars) optionalBool(key string, fallback bool) bool {
	value := os.Getenv(key)
	if value == "" {
		return fallback
	}

	valueBool, err := strconv.ParseBool(value)

	if err != nil {
		vars.malformed = append(vars.malformed, key)
		return fallback
	}

	return valueBool
}

// optionalDuration returns a time.Duration value of the given environment variable. If the variable is
// missing, it returns the fallback value. If the variable is not a valid time.Duration value, it appends the
// key to the slice of malformed variables and returns the fallback value. Otherwise, it returns the parsed
// time.Duration value.
func (vars *confVars) optionalDuration(key string, fallback time.Duration) time.Duration {
	value := os.Getenv(key)

	if value == "" {
		return fallback
	}

	valueDuration, err := time.ParseDuration(value)

	if err != nil {
		vars.malformed = append(vars.malformed, key)
		return fallback
	}

	return valueDuration
}

// mandatory returns a string value of the given environment variable. If the variable is missing, it
// appends the key to the slice of missing variables and returns an empty string. Otherwise, it returns the
// value of the environment variable.
func (vars *confVars) mandatory(key string) string {
	value := os.Getenv(key)
	if value == "" {
		vars.missing = append(vars.missing, key)
	}
	return value
}

// mandatoryInt returns an integer value of the given environment variable.
// If the variable is missing, it appends the key to the slice of missing variables and returns 0.
// If the variable is not a valid integer value, it appends the key to the slice of malformed variables and returns 0.
// Otherwise, it returns the parsed integer value.
func (vars *confVars) mandatoryInt(key string) int {
	value := os.Getenv(key)
	if value == "" {
		vars.missing = append(vars.missing, key)
		return 0
	}

	valueInt, err := strconv.Atoi(value)

	if err != nil {
		vars.malformed = append(vars.malformed, key)
		return 0
	}

	return valueInt
}

// mandatoryDuration returns a time.Duration value of the given environment variable. If the variable is
// missing, it appends the key to the slice of missing variables and returns 0. If the variable is not a valid
// time.Duration value, it appends the key to the slice of malformed variables and returns 0. Otherwise, it
// returns the parsed time.Duration value.
func (vars *confVars) mandatoryDuration(key string) time.Duration {
	value := os.Getenv(key)
	if value == "" {
		vars.missing = append(vars.missing, key)
		return 0
	}

	valueDuration, err := time.ParseDuration(value)

	if err != nil {
		vars.malformed = append(vars.malformed, key)
		return 0
	}

	return valueDuration
}

// mandatoryBool returns a boolean value of the given environment variable. If the variable is missing, it
// appends the key to the slice of missing variables and returns false. If the variable is not a valid boolean
// value, it appends the key to the slice of malformed variables and returns false. Otherwise, it returns the
// parsed boolean value.
func (vars *confVars) mandatoryBool(key string) bool {
	value := os.Getenv(key)
	if value == "" {
		vars.missing = append(vars.missing, key)
		return false
	}

	valueBool, err := strconv.ParseBool(value)

	if err != nil {
		vars.malformed = append(vars.malformed, key)
		return false
	}

	return valueBool
}

// Error returns an error if any of the mandatory environment variables are
// not set or if any of the variables have malformed values. The error message
// will list out the names of the variables that are missing or malformed. If
// all variables are set and have valid values, the method returns nil.
func (vars confVars) Error() error {
	if len(vars.missing) > 0 {
		return fmt.Errorf("missing mandatory configurations: %s", strings.Join(vars.missing, ", "))
	}

	if len(vars.malformed) > 0 {
		return fmt.Errorf("malformed configurations: %s", strings.Join(vars.malformed, "; "))
	}
	return nil
}
