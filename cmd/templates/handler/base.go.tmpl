package handler

import (
	"github.com/gofiber/fiber/v2"

	"{{ .ModuleName }}/constants"
	"{{ .ModuleName }}/types"
	"{{ .ModuleName }}/utils/localized"
)

// ErrorHandler is a convenience function that can be used as a custom error handler for
// Fiber. It calls BuildError with a default error message and status code of 500 (Internal
// Server Error). It also rolls back the active transaction if present.
func ErrorHandler(ctx *fiber.Ctx, err error) error {
	return BuildError(ctx, constants.InternalErrorCode, fiber.StatusInternalServerError, err, true)
}

// BuildError constructs a JSON response with the given error message and status code.
// It also rolls back any active database transaction associated with the context.
// If no status code is provided, it defaults to 500 (Internal Server Error).
// The original error, if present, is included in the response details.s
func BuildError(ctx *fiber.Ctx, ErrorCode string, code int, originalErr interface{}, rollback bool) error {
	// rollback transaction
	if rollback {
		rollbackCtxTrx(ctx)
	} else {
		commitCtxTrx(ctx)
	}

	if code == 0 {
		code = fiber.StatusInternalServerError
	}

	var detail interface{}

	if originalErr != nil {
		detail = originalErr
	}
	lang, ok := ctx.Locals(constants.LanguageKey).(string)
	if !ok {
		lang = "en"
	}
	return ctx.Status(code).JSON(types.BuildErrorResponse{
		Ok:  0,
		Msg: localized.Msg(lang, ErrorCode),
		Det: detail,
	})
}

// Success commits the active database transaction associated with the given Fiber context
// and returns a JSON response with the provided data. If committing the transaction fails,
// an error is returned.
func Success(ctx *fiber.Ctx, data interface{}) error {
	err := commitCtxTrx(ctx)

	if err != nil {
		return err
	}
	return ctx.JSON(types.Response{
		Ok:      1,
		Message: localized.Msg(ctx.Locals(constants.LanguageKey).(string), constants.SuccessCode),
		Data:    data,
	})
}
