/*
 * Created on Tue Mar 04 2025
 *
 * ¬© 2025 Nevilsoft Part., Ltd. All Rights Reserved.
 *
 * * ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏á‡∏ß‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå *
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á Nevilsoft Part., Ltd. ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
 * ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 * ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å ‡∏î‡∏±‡∏î‡πÅ‡∏õ‡∏•‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏à‡∏≤‡∏Å‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£
 *
 * ‡∏Å‡∏≤‡∏£‡∏•‡∏∞‡πÄ‡∏°‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡∏ô‡∏µ‡πâ ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏á‡πÇ‡∏ó‡∏©‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ô‡∏±‡∏¢ ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Ñ‡∏î‡∏µ‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢
 * ‡∏ï‡∏≤‡∏°‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ö‡∏±‡∏ç‡∏ç‡∏±‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏û.‡∏®. 2560 (‡∏°‡∏≤‡∏ï‡∏£‡∏≤ 7, 9, 10)
 * ‡πÅ‡∏•‡∏∞‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
 */

package localized

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strings"
)

var Language = make(map[string]map[string]string)
var DefaultLanguage = "en"
var FallbackLanguages = []string{"en"} // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤ fallback ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

// LoadLanguage reads JSON files from the specified directory and loads them
// into a global language map. It also allows loading additional fallback languages.
func LoadLanguage(dir string) error {
	files, err := os.ReadDir(dir)
	var langs []string
	if err != nil {
		return err
	}
	for _, file := range files {
		if file.IsDir() {
			continue
		}

		if ext := file.Name()[len(file.Name())-5:]; ext == ".json" {
			lang := file.Name()[:len(file.Name())-5]
			langs = append(langs, lang)
			content, err := os.ReadFile(fmt.Sprintf("%s/%s", dir, file.Name()))
			if err != nil {
				return fmt.Errorf("error reading file %s: %w", file.Name(), err)
			}

			var messages map[string]string
			if err = json.Unmarshal(content, &messages); err != nil {
				return fmt.Errorf("error un marshalling file %s: %w", file.Name(), err)
			}
			Language[lang] = messages
		}
	}
	log.Println("üåé Loading languages: " + strings.Join(langs, ", ") + " successfully")

	return nil
}

// LocalizedMsg retrieves the localized message for a given language and message key.
// It looks up the message key in the language map under the given language code.
// It also allows falling back to a sequence of other languages before using the default.
func Msg(lang string, msg string) string {
	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
	if localizedMsg, exists := Language[lang][msg]; exists {
		return localizedMsg
	}

	// ‡∏•‡∏≠‡∏á fallback ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
	for _, fallbackLang := range FallbackLanguages {
		if localizedMsg, exists := Language[fallbackLang][msg]; exists {
			return localizedMsg
		}
	}

	// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠, fallback ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
	if localizedMsg, exists := Language[DefaultLanguage][msg]; exists {
		return localizedMsg
	}

	// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö, ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏µ‡∏¢‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
	return string(msg)
}

// SetFallbackLanguages allows setting custom fallback languages.
func SetFallbackLanguages(langs []string) {
	FallbackLanguages = langs
}

// SetDefaultLanguage allows setting a custom default language.
func SetDefaultLanguage(lang string) {
	DefaultLanguage = lang
}
