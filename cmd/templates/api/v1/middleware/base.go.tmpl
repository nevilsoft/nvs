package middleware

import (
	"{{ .ModuleName }}/constants"
	"{{ .ModuleName }}/handler"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/limiter"
)

type Middleware struct {
}

func (mw *Middleware) RateLimit(count int, duration time.Duration) fiber.Handler {
	if duration == 0 {
		duration = time.Minute // Default to x requests per minute
	}
	return limiter.New(limiter.Config{
		Max:        count,
		Expiration: duration,
		KeyGenerator: func(c *fiber.Ctx) string {
			return c.IP() + "_" + c.Path() // Limit each IP to a unique request per path
		},
		LimitReached: func(ctx *fiber.Ctx) error {
			return handler.BuildError(ctx, constants.TooManyRequestsCode, fiber.ErrTooManyRequests.Code, nil, true)
		},
		SkipFailedRequests:     false,
		SkipSuccessfulRequests: false,
	})
}
