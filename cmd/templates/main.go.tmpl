/*
 * Created on Tue Mar 04 2025
 *
 * ¬© 2025 Nevilsoft Ltd., Part. All Rights Reserved.
 *
 * * ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏á‡∏ß‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå *
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á Nevilsoft Ltd., Part. ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
 * ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 * ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å ‡∏î‡∏±‡∏î‡πÅ‡∏õ‡∏•‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏à‡∏≤‡∏Å‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£
 *
 * ‡∏Å‡∏≤‡∏£‡∏•‡∏∞‡πÄ‡∏°‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡∏ô‡∏µ‡πâ ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏á‡πÇ‡∏ó‡∏©‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ô‡∏±‡∏¢ ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Ñ‡∏î‡∏µ‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢
 * ‡∏ï‡∏≤‡∏°‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ö‡∏±‡∏ç‡∏ç‡∏±‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏û.‡∏®. 2560 (‡∏°‡∏≤‡∏ï‡∏£‡∏≤ 7, 9, 10)
 * ‡πÅ‡∏•‡∏∞‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
 */

package main

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"os/signal"
	"strconv"
	"sync"
	"syscall"
	"time"

	"github.com/fatih/color"
	"github.com/gofiber/fiber/v2"
	"github.com/joho/godotenv"

	"{{ .ModuleName}}/cache"
	"{{ .ModuleName}}/cmd"
	"{{ .ModuleName}}/config"
	"{{ .ModuleName}}/db"
	"{{ .ModuleName}}/shared"
	"{{ .ModuleName}}/utils"
	"{{ .ModuleName}}/utils/localized"
	"github.com/hashicorp/go-hclog"
	"github.com/hashicorp/go-plugin"
)

var ip = "127.0.0.1"
var Version string

// Handshake configuration (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡πÉ‡∏ô plugin)
var handshakeConfig = plugin.HandshakeConfig{
	ProtocolVersion:  1,
	MagicCookieKey:   "CHECKER_PLUGIN",
	MagicCookieValue: "checker123",
}

// Plugin map
var pluginMap = map[string]plugin.Plugin{
	"checker": &shared.CheckerPlugin{},
}

func init() {
	// ‡∏™‡πà‡∏á path ‡∏Ç‡∏≠‡∏á main binary ‡πÉ‡∏´‡πâ plugin
	mainPath, _ := os.Executable()
	os.Setenv("MAIN_BINARY_PATH", mainPath)

	// Load plugin
	pluginPath := "./plugin/checker" // path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á plugin binary

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ plugin file ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if _, err := os.Stat(pluginPath); os.IsNotExist(err) {
		fmt.Println("‚ùå Plugin not found:", pluginPath)
		os.Exit(1)
	}

	// Create plugin client
	client := plugin.NewClient(&plugin.ClientConfig{
		HandshakeConfig: handshakeConfig,
		Plugins:         pluginMap,
		Cmd:             exec.Command(pluginPath),
		Logger: hclog.New(&hclog.LoggerOptions{
			Level:  hclog.Error,
			Output: os.Stderr,
		}),
	})
	defer client.Kill()

	// Connect via RPC
	rpcClient, err := client.Client()
	if err != nil {
		fmt.Println("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô")
		os.Exit(1)
	}

	// Get the plugin
	raw, err := rpcClient.Dispense("checker")
	if err != nil {
		fmt.Println("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô")
		os.Exit(1)
	}

	// Cast to Checker interface
	checker := raw.(shared.Checker)
	if os.Getenv("ENV") != "dev" {
		if !checker.Check() {
			fmt.Println("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô")
			os.Exit(1)
		}
	}

	fmt.Println("‚úÖ Valid hash - ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
}

func main() {
	env := os.Getenv("ENV")
	fileEnv := "./.env.local"

	if env == "" || env == "dev" {
		env = "dev"
		fileEnv = "./.env.local"
	}

	if env == "prod" {
		fileEnv = "./.env"
	}

	if godotenv.Load(fileEnv) != nil {
		log.Fatal("Error loading .env file")
	}
	confVars, configErr := config.New()
	if configErr != nil {
		log.Fatal(configErr)
	}

	if err := localized.LoadLanguage("lang"); err != nil {
		log.Fatal(err)
	}
	localized.SetDefaultLanguage(localized.DefaultLanguage)

	if confVars.PostgresUser != "" {
		dbErr := db.Init()

		if dbErr != nil {
			// log.Fatal(dbErr)
			fmt.Println("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
			os.Exit(1)
		}

		defer db.Close()
	}

	if confVars.RedisHost != "" {
		cacheErr := cache.Init()

		if cacheErr != nil {
			log.Fatal(cacheErr)
		}

		defer cache.Close()
	}

	app := cmd.InitApp()
	docsApp := cmd.InitDocsApp()

	var wg sync.WaitGroup
	wg.Add(2)

	// Graceful shutdown signal handler
	shutdownChan := make(chan os.Signal, 1)
	signal.Notify(shutdownChan, os.Interrupt, syscall.SIGTERM)

	go func() {
		defer wg.Done()
		if confVars.Environment == "dev" {
			startServer(app, confVars.Port)
		} else {
			startServer(app, confVars.Port)
		}
	}()

	go func() {
		defer wg.Done()
		docsPort := "8081"
		if err := docsApp.Listen(":" + docsPort); err != nil {
			log.Printf("Docs server stopped: %v", err)
		}
	}()

	// Wait for OS signal to gracefully shutdown both servers
	go func() {
		<-shutdownChan
		fmt.Println("\nüîª Shutting down servers...")

		if err := app.Shutdown(); err != nil {
			log.Printf("Failed to shutdown app server: %v", err)
		}

		if err := docsApp.Shutdown(); err != nil {
			log.Printf("Failed to shutdown docs server: %v", err)
		}
	}()

	utils.ShowBanner(
		color.RGB(102, 178, 255).Sprintf("\033[1mNVS Structure + Fiber v2\033[0m"),
		color.RGB(102, 178, 255).Sprintf("¬© 2025 NevilsoftLtd., Part."),
		"",
		formatLine(color.BlackString("üîó API Server Info: ")+color.CyanString("\033[4mhttp://"+ip+confVars.Port+"/api/v1/server/info\033[0m"), "start"),
		formatLine(color.BlackString("üîó API Docs: ")+color.CyanString("\033[4mhttp://"+ip+":8081"+"/reference\033[0m"), "start"),
		"",
		formatLine(color.BlackString("Set Config In: ")+color.CyanString(".env.local"), "start"),
		formatLine(color.BlackString("Database Enabled: ")+color.CyanString(strconv.FormatBool(config.Conf.DatabaseEnabled)), "start"),
		formatLine(color.BlackString("Redis Enabled: ")+color.CyanString(strconv.FormatBool(config.Conf.RedisHost != "")), "start"),
		formatLine(color.BlackString("Environment: ")+color.CyanString(config.Conf.Environment), "start"),
		formatLine(color.BlackString("Origin: ")+color.CyanString(config.Conf.AllowOrigins), "start"),
		formatLine(color.BlackString("Version: ")+color.CyanString(Version), "start"),
	)
	color.Cyan("\nüöÄ Server is running... Press Ctrl+C to stop")

	wg.Wait()
	fmt.Println("‚úÖ Servers shutdown gracefully")
}

// startServerWithGracefulShutdown starts a Fiber server and listens for OS interrupt signals to gracefully
// shutdown the server. It handles the creation of a signal channel to catch interrupt signals and initiates
// a server shutdown when a signal is received. The function logs the startup and shutdown processes, and
// ensures that all idle connections are closed properly upon shutdown.
func startServerWithGracefulShutdown(a *fiber.App, fiberConnURL string) {

	// Create channel for idle connections.
	idleConnsClosed := make(chan struct{})

	go func() {
		sigint := make(chan os.Signal, 1)
		signal.Notify(sigint, os.Interrupt) // Catch OS signals.
		<-sigint

		// Received an interrupt signal, shutdown.
		if err := a.Shutdown(); err != nil {
			// Error from closing listeners, or context timeout:
			fmt.Printf("Oops... Server is not shutting down! Reason: %v", err)
		}

		close(idleConnsClosed)
	}()

	// Run server.
	if err := a.Listen(fiberConnURL); err != nil {
		fmt.Printf("Oops... Server is not running! Reason: %v", err)
	}

	<-idleConnsClosed
}

// startServer starts a Fiber server using the connection URL built by the ConnectionURLBuilder function.
// It logs a message indicating that the server is running and listening on the specified URL.
// If the server fails to start, it logs an error message with the reason for failure.
// The server can be stopped by pressing Ctrl+C.
func startServer(a *fiber.App, fiberConnURL string) {
	if err := a.Listen(fiberConnURL); err != nil {
		log.Printf("Oops... Server is not running! Reason: %v", err)
	}
}

func formatLine(text, align string) string {
	return fmt.Sprintf("%s|%s", align, text)
}
