/*
 * Created on Tue Mar 04 2025
 *
 * ¬© 2025 Nevilsoft Part., Ltd. All Rights Reserved.
 *
 * * ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏á‡∏ß‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå *
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á Nevilsoft Part., Ltd. ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
 * ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 * ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å ‡∏î‡∏±‡∏î‡πÅ‡∏õ‡∏•‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏à‡∏≤‡∏Å‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£
 *
 * ‡∏Å‡∏≤‡∏£‡∏•‡∏∞‡πÄ‡∏°‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡∏ô‡∏µ‡πâ ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏á‡πÇ‡∏ó‡∏©‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ô‡∏±‡∏¢ ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Ñ‡∏î‡∏µ‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢
 * ‡∏ï‡∏≤‡∏°‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ö‡∏±‡∏ç‡∏ç‡∏±‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏û.‡∏®. 2560 (‡∏°‡∏≤‡∏ï‡∏£‡∏≤ 7, 9, 10)
 * ‡πÅ‡∏•‡∏∞‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
 */

package cmd

import (
	"bufio"
	"embed"
	"fmt"
	"io/fs"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/spf13/cobra"
)

//go:embed templates/*
var templatesFS embed.FS

var initCmd = &cobra.Command{
	Use:   "init",
	Short: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå Golang",
	Run: func(cmd *cobra.Command, args []string) {
		wd, _ := os.Getwd()
		repo, _ := cmd.Flags().GetString("repo")

		defaultProjectName := filepath.Base(wd)
		projectName := prompt("üì¶ Project name", defaultProjectName)

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Git user.name
		gitUser, err := getGitUserName()
		if err != nil {
			fmt.Println("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Git user.name:", err)
			fmt.Println("üëâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Git user.name ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
			return
		}

		// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
		targetDir, err := determineTargetDirectory(projectName, wd)
		if err != nil {
			fmt.Println("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå:", err)
			return
		}

		// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î module name
		if repo == "" {
			repo = prompt("üß± Go module name", fmt.Sprintf("github.com/%s/%s", gitUser, projectName))
		}

		fmt.Printf("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå %s (module: %s)...\n", projectName, repo)

		// ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï
		err = copyEmbeddedTemplates("templates", targetDir, map[string]string{
			"ProjectName": projectName,
			"ModuleName":  repo,
		})
		if err != nil {
			fmt.Println("‚ùå ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err)
			return
		}

		fmt.Println("‚úÖ ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
		fmt.Println("üìÇ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:")
		fmt.Println("  1. go mod tidy")
		fmt.Println("  2. nvs dev")
		fmt.Println("  3. nvs build")
		fmt.Println("  4. nvs start")
	},
}

// getGitUserName ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Git config
func getGitUserName() (string, error) {
	cmd := exec.Command("git", "config", "--global", "user.name")
	output, err := cmd.Output()
	if err != nil {
		return "", err
	}
	userName := strings.TrimSpace(string(output))
	if userName == "" {
		return "", fmt.Errorf("git user.name is empty")
	}
	return userName, nil
}

// determineTargetDirectory ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
func determineTargetDirectory(projectName, currentDir string) (string, error) {
	defaultProjectName := filepath.Base(currentDir)

	if projectName == defaultProjectName {
		return ".", nil
	}

	confirmName := confirm(fmt.Sprintf("‚ùì ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ \"%s\" ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?", projectName))
	if !confirmName {
		return "", fmt.Errorf("user cancelled project creation")
	}

	if err := os.Mkdir(projectName, 0755); err != nil {
		return "", err
	}

	return projectName, nil
}

// prompt ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ input ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ default
func prompt(question, defaultValue string) string {
	reader := bufio.NewReader(os.Stdin)
	fmt.Printf("%s (%s): ", question, defaultValue)
	text, _ := reader.ReadString('\n')
	text = strings.TrimSpace(text)
	if text == "" {
		return defaultValue
	}
	return text
}

// confirm ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö y/n
func confirm(question string) bool {
	reader := bufio.NewReader(os.Stdin)
	fmt.Printf("%s (y/n): ", question)
	text, _ := reader.ReadString('\n')
	text = strings.ToLower(strings.TrimSpace(text))
	return text == "y" || text == "yes"
}

// copyEmbeddedTemplates ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å embed ‡πÅ‡∏•‡∏∞ render ‡∏î‡πâ‡∏ß‡∏¢ template
func copyEmbeddedTemplates(srcDir, destDir string, data map[string]string) error {
	return fs.WalkDir(templatesFS, srcDir, func(path string, d os.DirEntry, err error) error {
		if err != nil {
			return err
		}

		relPath, _ := filepath.Rel(srcDir, path)
		targetPath := filepath.Join(destDir, relPath)

		if d.IsDir() {
			return os.MkdirAll(targetPath, 0755)
		}

		// ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå .tmpl ‡πÉ‡∏´‡πâ parse ‡πÄ‡∏õ‡πá‡∏ô template
		if strings.HasSuffix(d.Name(), ".tmpl") {
			content, err := templatesFS.ReadFile(path)
			if err != nil {
				return err
			}

			tmplName := strings.TrimPrefix(path, srcDir+"/")
			tmpl, err := template.New(tmplName).Parse(string(content))
			if err != nil {
				return fmt.Errorf("template parse error in %s: %w", path, err)
			}

			// ‡∏ï‡∏±‡∏î .tmpl ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
			targetPath = strings.TrimSuffix(targetPath, ".tmpl")

			file, err := os.Create(targetPath)
			if err != nil {
				return err
			}
			defer file.Close()

			return tmpl.Execute(file, data)
		}

		// ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà .tmpl ‚Üí ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ï‡∏£‡∏á ‡πÜ
		rawContent, err := templatesFS.ReadFile(path)
		if err != nil {
			return err
		}
		return os.WriteFile(targetPath, rawContent, 0755)
	})
}

func init() {
	initCmd.Flags().String("repo", "", "‡∏£‡∏∞‡∏ö‡∏∏ module name (‡πÄ‡∏ä‡πà‡∏ô github.com/user/project)")
	RootCmd.AddCommand(initCmd)
}
