/*
 * Created on Tue Mar 04 2025
 *
 * ¬© 2025 Nevilsoft Ltd., Part. All Rights Reserved.
 *
 * * ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏á‡∏ß‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå *
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á Nevilsoft Ltd., Part. ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
 * ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 * ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å ‡∏î‡∏±‡∏î‡πÅ‡∏õ‡∏•‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏à‡∏≤‡∏Å‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£
 *
 * ‡∏Å‡∏≤‡∏£‡∏•‡∏∞‡πÄ‡∏°‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡∏ô‡∏µ‡πâ ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏á‡πÇ‡∏ó‡∏©‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ô‡∏±‡∏¢ ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Ñ‡∏î‡∏µ‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢
 * ‡∏ï‡∏≤‡∏°‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ö‡∏±‡∏ç‡∏ç‡∏±‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏û.‡∏®. 2560 (‡∏°‡∏≤‡∏ï‡∏£‡∏≤ 7, 9, 10)
 * ‡πÅ‡∏•‡∏∞‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
 */

package cmd

import (
	"bufio"
	"embed"
	"fmt"
	"io/fs"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strings"
	"text/template"

	"github.com/spf13/cobra"
)

//go:embed templates/*
var templatesFS embed.FS

var initCmd = &cobra.Command{
	Use:   "init [project-name]",
	Short: "Create a new Golang project structure",
	Long: `Create a new Golang project structure with interactive prompts.

If project-name is provided, it will be used as the project name.
If not provided, you will be prompted to enter a project name.

Examples:
  nvs init                    # Interactive mode
  nvs init my-project         # Create project with name "my-project"
  nvs init my-project --force # Force overwrite existing directory`,
	Args: cobra.MaximumNArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		wd, err := os.Getwd()
		if err != nil {
			fmt.Println("‚ùå Error getting working directory:", err)
			return
		}

		repo, _ := cmd.Flags().GetString("repo")
		force, _ := cmd.Flags().GetBool("force")

		// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
		var projectName string
		if len(args) > 0 {
			// ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ argument ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡πâ‡∏ô
			projectName = args[0]
			fmt.Printf("üì¶ Using project name: %s\n", projectName)
		} else {
			// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ argument ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
			defaultProjectName := filepath.Base(wd)
			projectName = prompt("üì¶ Project name", defaultProjectName)
		}

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Git user.name
		gitUser, err := getGitUserName()
		if err != nil {
			fmt.Println("‚ö†Ô∏è Git user.name not found:", err)
			fmt.Println("üëâ Please set Git user.name before using")
			return
		}

		// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
		skipConfirmation := len(args) > 0 // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ argument ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
		targetDir, err := determineTargetDirectory(projectName, wd, skipConfirmation, force)
		if err != nil {
			fmt.Println("‚ùå Unable to create directory:", err)
			return
		}

		// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î module name
		if repo == "" {
			repo = prompt("üß± Go module name", fmt.Sprintf("github.com/%s/%s", gitUser, projectName))
		}

		fmt.Printf("üîß Creating project %s (module: %s)...\n", projectName, repo)

		// ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï
		err = copyEmbeddedTemplates("templates", targetDir, map[string]string{
			"ProjectName": projectName,
			"ModuleName":  repo,
		})
		if err != nil {
			fmt.Println("‚ùå Error:", err)
			return
		}

		fmt.Println("‚úÖ Project created successfully!")
		fmt.Println("üìÇ After entering the project directory, run the following commands:")
		fmt.Println("  1. go mod tidy")
		fmt.Println("  2. nvs dev")
		fmt.Println("  3. nvs build")
		fmt.Println("  4. nvs start")
	},
}

// getGitUserName ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Git config
func getGitUserName() (string, error) {
	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Git ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
	if _, err := exec.LookPath("git"); err != nil {
		return "", fmt.Errorf("git command not found in PATH")
	}

	cmd := exec.Command("git", "config", "--global", "user.name")
	output, err := cmd.Output()
	if err != nil {
		return "", fmt.Errorf("failed to get git user.name: %w", err)
	}
	userName := strings.TrimSpace(string(output))
	if userName == "" {
		return "", fmt.Errorf("git user.name is empty")
	}
	return userName, nil
}

// determineTargetDirectory ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
func determineTargetDirectory(projectName, currentDir string, skipConfirmation, force bool) (string, error) {
	defaultProjectName := filepath.Base(currentDir)

	if projectName == defaultProjectName {
		return ".", nil
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if _, err := os.Stat(projectName); err == nil {
		// ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
		var overwrite bool
		if force {
			// ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ --force ‡πÉ‡∏´‡πâ overwrite ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏≤‡∏°
			overwrite = true
			fmt.Printf("üóëÔ∏è Force removing existing directory: %s\n", projectName)
		} else {
			// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ --force ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô
			overwrite = confirmWithDefault(fmt.Sprintf("‚ö†Ô∏è Directory \"%s\" already exists. Overwrite?", projectName), false)
		}

		if !overwrite {
			return "", fmt.Errorf("user cancelled project creation")
		}

		// ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤
		if err := os.RemoveAll(projectName); err != nil {
			return "", fmt.Errorf("failed to remove existing directory %s: %w", projectName, err)
		}
		if !force {
			fmt.Printf("üóëÔ∏è Removed existing directory: %s\n", projectName)
		}
	}

	// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
	if !skipConfirmation {
		confirmName := confirm(fmt.Sprintf("‚ùì Use \"%s\" to create this project?", projectName))
		if !confirmName {
			return "", fmt.Errorf("user cancelled project creation")
		}
	}

	// ‡πÉ‡∏ä‡πâ permissions ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ OS
	perm := os.FileMode(0755)
	if runtime.GOOS == "windows" {
		perm = os.FileMode(0666) // Windows ‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à execute bit
	}

	if err := os.Mkdir(projectName, perm); err != nil {
		return "", fmt.Errorf("failed to create directory %s: %w", projectName, err)
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
	if entries, err := os.ReadDir(projectName); err != nil {
		return "", fmt.Errorf("failed to verify directory %s: %w", projectName, err)
	} else if len(entries) > 0 {
		return "", fmt.Errorf("directory %s is not empty after creation", projectName)
	}

	return projectName, nil
}

// prompt ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ input ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ default
func prompt(question, defaultValue string) string {
	reader := bufio.NewReader(os.Stdin)
	fmt.Printf("%s (%s): ", question, defaultValue)
	text, _ := reader.ReadString('\n')
	text = strings.TrimSpace(text)
	if text == "" {
		return defaultValue
	}
	return text
}

// confirm ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö y/n default y
func confirm(question string) bool {
	reader := bufio.NewReader(os.Stdin)
	fmt.Printf("%s (y/n) [y]: ", question)
	text, _ := reader.ReadString('\n')
	text = strings.ToLower(strings.TrimSpace(text))
	if text == "" {
		return true
	}
	return text == "y" || text == "yes"
}

// confirmWithDefault ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö y/n ‡∏û‡∏£‡πâ‡∏≠‡∏° default value
func confirmWithDefault(question string, defaultValue bool) bool {
	reader := bufio.NewReader(os.Stdin)
	defaultStr := "y"
	if !defaultValue {
		defaultStr = "n"
	}
	fmt.Printf("%s (y/n) [%s]: ", question, defaultStr)
	text, _ := reader.ReadString('\n')
	text = strings.ToLower(strings.TrimSpace(text))
	if text == "" {
		return defaultValue
	}
	return text == "y" || text == "yes"
}

// normalizePath ‡πÅ‡∏õ‡∏•‡∏á path ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OS ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
func normalizePath(path string) string {
	// ‡πÅ‡∏õ‡∏•‡∏á forward slash ‡πÄ‡∏õ‡πá‡∏ô OS-specific separator
	return filepath.FromSlash(path)
}

// copyEmbeddedTemplates ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å embed ‡πÅ‡∏•‡∏∞ render ‡∏î‡πâ‡∏ß‡∏¢ template
func copyEmbeddedTemplates(srcDir, destDir string, data map[string]string) error {
	return fs.WalkDir(templatesFS, srcDir, func(path string, d os.DirEntry, err error) error {
		if err != nil {
			return err
		}

		// ‡πÉ‡∏ä‡πâ filepath.Rel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ relative path ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
		relPath, err := filepath.Rel(srcDir, path)
		if err != nil {
			return fmt.Errorf("failed to get relative path: %w", err)
		}

		// ‡πÅ‡∏õ‡∏•‡∏á path ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OS ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
		relPath = normalizePath(relPath)
		targetPath := filepath.Join(destDir, relPath)

		if d.IsDir() {
			// ‡πÉ‡∏ä‡πâ permissions ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ OS
			perm := os.FileMode(0755)
			if runtime.GOOS == "windows" {
				perm = os.FileMode(0666)
			}
			return os.MkdirAll(targetPath, perm)
		}

		// ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå .tmpl ‡πÉ‡∏´‡πâ parse ‡πÄ‡∏õ‡πá‡∏ô template
		if strings.HasSuffix(d.Name(), ".tmpl") {
			content, err := templatesFS.ReadFile(path)
			if err != nil {
				return fmt.Errorf("failed to read template file %s: %w", path, err)
			}

			// ‡πÉ‡∏ä‡πâ filepath.Join ‡πÅ‡∏ó‡∏ô string concatenation
			tmplName := filepath.Join(strings.TrimPrefix(path, filepath.Join(srcDir, "")))
			tmpl, err := template.New(tmplName).Parse(string(content))
			if err != nil {
				return fmt.Errorf("template parse error in %s: %w", path, err)
			}

			// ‡∏ï‡∏±‡∏î .tmpl ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
			targetPath = strings.TrimSuffix(targetPath, ".tmpl")

			// ‡∏™‡∏£‡πâ‡∏≤‡∏á directory parent ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
			targetDir := filepath.Dir(targetPath)
			if err := os.MkdirAll(targetDir, 0755); err != nil {
				return fmt.Errorf("failed to create target directory %s: %w", targetDir, err)
			}

			file, err := os.Create(targetPath)
			if err != nil {
				return fmt.Errorf("failed to create file %s: %w", targetPath, err)
			}
			defer file.Close()

			return tmpl.Execute(file, data)
		}

		// ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà .tmpl ‚Üí ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ï‡∏£‡∏á ‡πÜ
		rawContent, err := templatesFS.ReadFile(path)
		if err != nil {
			return fmt.Errorf("failed to read file %s: %w", path, err)
		}

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á directory parent ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
		targetDir := filepath.Dir(targetPath)
		if err := os.MkdirAll(targetDir, 0755); err != nil {
			return fmt.Errorf("failed to create target directory %s: %w", targetDir, err)
		}

		// ‡πÉ‡∏ä‡πâ permissions ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ OS
		perm := os.FileMode(0644)
		if runtime.GOOS == "windows" {
			perm = os.FileMode(0666)
		}

		return os.WriteFile(targetPath, rawContent, perm)
	})
}

func init() {
	initCmd.Flags().String("repo", "", "Specify the module name (e.g. github.com/user/project)")
	initCmd.Flags().BoolP("force", "f", false, "Force overwrite existing directory")
	RootCmd.AddCommand(initCmd)
}
