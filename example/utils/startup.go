/*
 * Created on Tue Mar 04 2025
 *
 * ¬© 2025 Nevilsoft Part., Ltd. All Rights Reserved.
 *
 * * ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏á‡∏ß‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå *
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á Nevilsoft Part., Ltd. ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
 * ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 * ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å ‡∏î‡∏±‡∏î‡πÅ‡∏õ‡∏•‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏à‡∏≤‡∏Å‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£
 *
 * ‡∏Å‡∏≤‡∏£‡∏•‡∏∞‡πÄ‡∏°‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡∏ô‡∏µ‡πâ ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏á‡πÇ‡∏ó‡∏©‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ô‡∏±‡∏¢ ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Ñ‡∏î‡∏µ‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢
 * ‡∏ï‡∏≤‡∏°‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ö‡∏±‡∏ç‡∏ç‡∏±‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏û.‡∏®. 2560 (‡∏°‡∏≤‡∏ï‡∏£‡∏≤ 7, 9, 10)
 * ‡πÅ‡∏•‡∏∞‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
 */

package utils

import (
	"fmt"
	"os"
	"regexp"
	"strings"
	"time"

	"github.com/mattn/go-runewidth"
)

// StartupStatus represents the status of startup operations
type StartupStatus struct {
	Message   string
	Status    string
	Timestamp time.Time
}

// StartupManager manages startup messages and status
type StartupManager struct {
	statuses []StartupStatus
}

// NewStartupManager creates a new startup manager
func NewStartupManager() *StartupManager {
	return &StartupManager{
		statuses: make([]StartupStatus, 0),
	}
}

// AddStatus adds a new status message
func (sm *StartupManager) AddStatus(message, status string) {
	startupStatus := StartupStatus{
		Message:   message,
		Status:    status,
		Timestamp: time.Now(),
	}
	sm.statuses = append(sm.statuses, startupStatus)

}

// printStatus prints a single status message
func (sm *StartupManager) PrintStatus(status StartupStatus) {
	var statusIcon string
	switch status.Status {
	case "SUCCESS":
		statusIcon = "‚úÖ"
	case "ERROR":
		statusIcon = "‚ùå"
	case "WARNING":
		statusIcon = "‚ö†Ô∏è"
	case "INFO":
		statusIcon = "‚ÑπÔ∏è"
	case "LOADING":
		statusIcon = "üîÑ"
	default:
		statusIcon = "üìù"
	}

	fmt.Printf("%s %s\n", statusIcon, status.Message)
}

const bannerWidth = 80

func ShowBanner(title string, lines ...string) {
	border := strings.Repeat("‚ïê", bannerWidth)
	fmt.Printf("‚ïî%s‚ïó\n", border)

	PrintBannerLine(title, "center")

	for _, line := range lines {
		parts := strings.SplitN(line, "|", 2)
		align := "center"
		text := line
		if len(parts) == 2 {
			align = parts[0]
			text = parts[1]
		}
		PrintBannerLine(text, align)
	}

	fmt.Printf("‚ïö%s‚ïù\n", border)
	fmt.Println()
}

var ansiRegexp = regexp.MustCompile(`\x1b\[[0-9;]*m`)

func stripANSI(text string) string {
	return ansiRegexp.ReplaceAllString(text, "")
}

func PrintBannerLine(text string, align string) {
	displayWidth := runewidth.StringWidth(stripANSI(text))
	if displayWidth > bannerWidth {
		text = runewidth.Truncate(text, bannerWidth, "‚Ä¶")
		displayWidth = runewidth.StringWidth(text)
	}

	switch align {
	case "start":
		leftPad := strings.Repeat(" ", 2)
		rightPad := strings.Repeat(" ", bannerWidth-displayWidth-2)
		fmt.Printf("‚ïë%s%s%s‚ïë\n", leftPad, text, rightPad)

	case "end":
		leftPad := strings.Repeat(" ", bannerWidth-displayWidth)
		fmt.Printf("‚ïë%s%s‚ïë\n", leftPad, text)

	case "center", "":
		padding := (bannerWidth - displayWidth) / 2
		leftPad := strings.Repeat(" ", padding)
		rightPad := strings.Repeat(" ", bannerWidth-displayWidth-padding)
		fmt.Printf("‚ïë%s%s%s‚ïë\n", leftPad, text, rightPad)

	default:
		// fallback: center
		padding := (bannerWidth - displayWidth) / 2
		leftPad := strings.Repeat(" ", padding)
		rightPad := strings.Repeat(" ", bannerWidth-displayWidth-padding)
		fmt.Printf("‚ïë%s%s%s‚ïë\n", leftPad, text, rightPad)
	}
}

// ShowStartupBanner displays the startup banner
func (sm *StartupManager) ShowStartupBanner() {
	fmt.Println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
	fmt.Println("‚ïë                        NVS CLI v1.0.0                        ‚ïë")
	fmt.Println("‚ïë                  ¬© 2025 Nevilsoft Part., Ltd.                ‚ïë")
	fmt.Println("‚ïë                                                              ‚ïë")
	fmt.Println("‚ïë  üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö...                                         ‚ïë")
	fmt.Println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
	fmt.Println()
}

// ShowStartupSummary displays a summary of all startup operations
func (sm *StartupManager) ShowStartupSummary() {
	fmt.Println()
	fmt.Println("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:")
	fmt.Println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")

	successCount := 0
	errorCount := 0
	warningCount := 0

	for _, status := range sm.statuses {
		switch status.Status {
		case "SUCCESS":
			successCount++
		case "ERROR":
			errorCount++
		case "WARNING":
			warningCount++
		}
	}

	fmt.Printf("‚îÇ ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: %d  |  ‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: %d  |  ‚ö†Ô∏è ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: %d           	       ‚îÇ\n",
		successCount, errorCount, warningCount)
	fmt.Println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")

	if errorCount > 0 {
		fmt.Println("‚ö†Ô∏è  ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô")
	} else {
		fmt.Println("üéâ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
	}
	fmt.Println()
}

// GetStatuses returns all status messages
func (sm *StartupManager) GetStatuses() []StartupStatus {
	return sm.statuses
}

// HasErrors checks if there are any errors in startup
func (sm *StartupManager) HasErrors() bool {
	for _, status := range sm.statuses {
		if status.Status == "ERROR" {
			return true
		}
	}
	return false
}

func StartupMessage() {

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á startup manager
	sm := NewStartupManager()

	// ‡πÅ‡∏™‡∏î‡∏á banner
	sm.ShowStartupBanner()

	// ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
	sm.AddStatus("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "LOADING")
	time.Sleep(1 * time.Second)
	sm.AddStatus("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "SUCCESS")

	sm.AddStatus("‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", "LOADING")
	time.Sleep(500 * time.Millisecond)
	sm.AddStatus("‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", "SUCCESS")

	sm.AddStatus("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á", "LOADING")
	time.Sleep(800 * time.Millisecond)
	sm.AddStatus("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á", "WARNING")

	sm.AddStatus("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Web Server", "LOADING")
	time.Sleep(1 * time.Second)
	sm.AddStatus("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Web Server", "SUCCESS")

	sm.AddStatus("‡πÇ‡∏´‡∏•‡∏î Middleware", "LOADING")
	time.Sleep(600 * time.Millisecond)
	sm.AddStatus("‡πÇ‡∏´‡∏•‡∏î Middleware", "SUCCESS")

	sm.AddStatus("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Redis", "LOADING")
	time.Sleep(700 * time.Millisecond)
	sm.AddStatus("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Redis", "ERROR")

	// ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ
	sm.ShowStartupSummary()

	// ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error ‡πÉ‡∏´‡πâ exit ‡∏î‡πâ‡∏ß‡∏¢ code 1
	if sm.HasErrors() {
		os.Exit(1)
	}
}

// InitializeStartup initializes the startup process
func InitializeStartup() *StartupManager {
	sm := NewStartupManager()
	sm.ShowStartupBanner()

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
	sm.AddStatus("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Go version", "INFO")
	sm.AddStatus("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Git", "INFO")
	sm.AddStatus("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå", "INFO")

	return sm
}
